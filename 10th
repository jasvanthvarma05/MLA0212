import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Generate a synthetic dataset
np.random.seed(42)
weeks = np.arange(1, 101)  # 100 weeks
sales = 50 + 2 * weeks + np.random.randn(100) * 10  # Linear trend with some noise

# Create a DataFrame
data = pd.DataFrame({'Week': weeks, 'Sales': sales})

# Inspect the dataset
print(data.head())

# Feature and target variable
X = data[['Week']]
y = data['Sales']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Predict sales for the upcoming weeks
future_weeks = np.arange(101, 121).reshape(-1, 1)  # Next 20 weeks
future_sales_pred = model.predict(future_weeks)

# Visualize the results
plt.figure(figsize=(10, 6))
plt.scatter(X, y, color='blue', label='Actual Sales')
plt.plot(X_test, y_pred, color='red', linewidth=2, label='Predicted Sales')
plt.plot(future_weeks, future_sales_pred, color='green', linewidth=2, linestyle='dashed', label='Future Sales Prediction')
plt.xlabel('Week')
plt.ylabel('Sales')
plt.title('Sales Prediction')
plt.legend()
plt.show()

# Display future sales predictions
future_sales = pd.DataFrame({'Week': future_weeks.flatten(), 'Predicted Sales': future_sales_pred})
print(future_sales)
"""
   Week      Sales
0     1  56.967142
1     2  52.617357
2     3  62.476885
3     4  73.230299
4     5  57.658466
Mean Squared Error: 62.2042242290179
R-squared: 0.9814382585609467
"""
